#!/bin/bash
# benjaesq@me.com

source ./testlib.sh

#FIXME: this is printing just one dash always
logdashes() { printf %0.s# {1..$1} >> ${logfile}; echo >> ${logfile}; }

log50dashes() { logdashes "50"; }

logheader() { log50dashes; log "  ${testscript} starting"; log50dashes; }

logfooter() { log50dashes; log "  ${testscript} END"; log50dashes; }

init_log()
{

    #assuming it is a unique file given the hour, minute, second in the name
    touch ${logfile}
    if [[ "X$?" != "X0" ]]; then
        warn "cannot create log file: ${logfile}"
        NOLOG=1
    else
    # initialize log
        logheader
    fi

}

close_log()
{
    test ${NOLOG} -eq 0 && logfooter
}

usage()
{
    echo -e "usage: \n\t`basename $0` <test-subject> [options]"
    echo -e "\t`basename $0` <-l|--list>"
}

find_test_subject()
{
    for optarg in "$@"
    do
        #TODO: Finish him!!
        echo -n
    done
}

parseargs()
{
    short_opts=":df:lvx"
    long_opts="filter list"

    if [ "X$#" = "X1" ]; then
        testscript=$1
    else
        while getopts ${short_opts} optarg
        do
            case $optarg in
                d)
                    debug_flag=1
                    verbose_flag=1
                    debug "debug_flag=$debug_flag"
                    debug "verbose_flag=$verbose_flag"
                    ;;
                f)
                    test_filter=${OPTARG}
                    debug "test_filter=${test_filter}"
                    ;;
                l)
                    list_tests=1
                    debug "list_tests=${list_tests}"
                    ;;
                v)
                    verbose_flag=1
                    debug "verbose_flag=$verbose_flag"
                    ;;
                ?)
                    echo "unrecognizable argument ${OPTARG}"
                    ;;
            esac
        done
        #find a test subject candidate, if any
        find_test_subject "$@"
    fi
}

# check for arguments and process them
if [ "X$#" = "X0" ]; then
    echo "ERROR: $0 no arguments supplied" 1>&2
    usage
    exit 85 #E_OPTERROR
fi

parseargs "$@"

if [ ! -f "${testscript}" ]; then
    fatal "${testscript} not found, exiting"
    exit 126
fi

# count the number of tests that the testscript has
testlist=`grep "^test_.*()" ${testscript} | cut -f1 -d '('`
verbose "test list queried is:\n${testlist}"
# why is the wc including spaces?
testnum=`echo ${testlist} | wc -w| tr -d ' '`
debug "testnum=${testnum}"

if [ "X${testnum}" == "X0" ]; then
    fatal "could not find tests in ${testscript}"
    exit 126
fi
verbose "found ${testnum} number of tests"

shutdir=${SHUTDIR-${PWD}}
testname=`echo ${testscript}|cut -f-2 -d'.'`
NOLOG=0
# construct the log file name
HMS=`date +%H%M%S`
logfile=${shutdir}/${HMS}-${testname}.log
init_log

source ./${testscript}

#TODO: list the tests upon -l request

close_log
